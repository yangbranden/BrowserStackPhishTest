import requests
import yaml
import os
import json

# Use hardcoded lists
MANUAL_SCOPE = True

# See https://www.browserstack.com/list-of-browsers-and-platforms/automate for list of browser versions
firefox_versions = [130.0, 129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0]
chrome_versions = [129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0]
edge_versions = [129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0]
safari_versions = [18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0]
opera_versions = [12.16, 12.15]

# Use API to get all possible combinations of browser versions
s = requests.Session()
s.auth = (os.environ.get("BROWSERSTACK_USERNAME"), os.environ.get("BROWSERSTACK_ACCESS_KEY"))

r = s.get("https://api.browserstack.com/automate/browsers.json")
output = json.loads(r.text)

# Find the latest version
latest_versions = {
    'firefox': 0.0,
    'chrome': 0.0,
    'edge': 0.0,
    'safari': 0.0,
    'opera': 0.0
}
for item in output:
    if item["browser"] == "firefox":
        try:
            detected_version = float(item["browser_version"])
            if detected_version > latest_versions["firefox"]:
                latest_versions["firefox"] = detected_version
        except Exception:
            continue
    elif item["browser"] == "chrome":
        try:
            detected_version = float(item["browser_version"])
            if detected_version > latest_versions["chrome"]:
                latest_versions["chrome"] = detected_version
        except Exception:
            continue
    elif item["browser"] == "edge":
        try:
            detected_version = float(item["browser_version"])
            if detected_version > latest_versions["edge"]:
                latest_versions["edge"] = detected_version
        except Exception:
            continue
    elif item["browser"] == "safari":
        try:
            detected_version = float(item["browser_version"])
            if detected_version > latest_versions["safari"]:
                latest_versions["safari"] = detected_version
        except Exception:
            continue
    elif item["browser"] == "opera":
        try:
            detected_version = float(item["browser_version"])
            if detected_version > latest_versions["opera"]:
                latest_versions["opera"] = detected_version
        except Exception:
            continue
print("Latest versions:\n", latest_versions)

if MANUAL_SCOPE:
    data = {
        'firefox_versions': firefox_versions,
        'chrome_versions': chrome_versions,
        'edge_versions': edge_versions,
        'safari_versions': safari_versions,
        'opera_versions': opera_versions,
    }

with open("./targets/browser_versions.yml", "w+") as f:
    f.write("# =======================================\n")
    f.write("# FILE GENERATED BY scope_browser_versions.py\n")
    f.write("# =======================================\n")
    yaml.dump(data, f)